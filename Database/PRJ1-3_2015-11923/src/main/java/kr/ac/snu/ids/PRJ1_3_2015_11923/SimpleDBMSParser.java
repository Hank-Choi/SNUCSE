/* Generated By:JavaCC: Do not edit this line. SimpleDBMSParser.java */
package kr.ac.snu.ids.PRJ1_3_2015_11923;
import java.io.File;
import java.io.UnsupportedEncodingException;
import java.util.ArrayList;
import com.sleepycat.je.Cursor;
import com.sleepycat.je.Database;
import com.sleepycat.je.DatabaseConfig;
import com.sleepycat.je.DatabaseEntry;
import com.sleepycat.je.DatabaseException;
import com.sleepycat.je.LockMode;
import com.sleepycat.je.OperationStatus;
import com.sleepycat.je.Environment;
import com.sleepycat.je.EnvironmentConfig;
import com.sleepycat.bind.serial.StoredClassCatalog;
import com.sleepycat.bind.serial.SerialBinding;
import kr.ac.snu.ids.PRJ1_3_2015_11923.condition.*;
import kr.ac.snu.ids.PRJ1_3_2015_11923.table.*;

public class SimpleDBMSParser implements SimpleDBMSParserConstants {
  // Environment & Database define
  public static Environment myDbEnvironment = null;

  static Database myDatabase = null;

  static Database myClassDb = null;

  static DatabaseEntry key;

  static DatabaseEntry value;

  static StoredClassCatalog classCatalog;

  static SerialBinding < Table > dataBinding;

  public static void main(String args []) throws ParseException
  {
    /* Opening DB */
    // Open Database Environment or if not, create one
    EnvironmentConfig envConfig = new EnvironmentConfig();
    envConfig.setAllowCreate(true);
    myDbEnvironment = new Environment(new File("db/"), envConfig);
    // Open Database or if not, create one.
    DatabaseConfig dbConfig = new DatabaseConfig();
    dbConfig.setAllowCreate(true);
    dbConfig.setDeferredWrite(true);
    myDatabase = myDbEnvironment.openDatabase(null, "sampleDatabase", dbConfig);
    // Instantiate the class catalog
    dbConfig.setSortedDuplicates(false);
    myClassDb = myDbEnvironment.openDatabase(null, "classDb", dbConfig);
    // Instantiate the class catalog
    classCatalog = new StoredClassCatalog(myClassDb);
    // Create the binding
    dataBinding = new SerialBinding < Table > (classCatalog, Table.class);
    // Project 1-1 Parser
    SimpleDBMSParser parser = new SimpleDBMSParser(System.in);
    // prompt when program starts
    System.out.print("DB_2015-11923> ");
    while (true)
    {
      try
      {
        parser.command();
      }
      catch (ParseException e)
      {
        System.out.println("Syntax error");
        SimpleDBMSParser.ReInit(System.in);
        // prompt after syntax error
        System.out.print("DB_2015-11923> ");
      }
      catch (Exception e)
      {
        System.out.println(e.getMessage());
        SimpleDBMSParser.ReInit(System.in);
        System.out.print("DB_2015-11923> ");
      }
    }
  }

  //tableName을 받아 DB에 있는 table을 삭제
  public static void dropTable(String keyString)
  {
    try
    {
      DatabaseEntry key = new DatabaseEntry(keyString.getBytes("UTF-8"));
      myDatabase.delete(null, key);
      myDatabase.sync();
    }
    catch (Exception e)
    {
      e.printStackTrace();
    }
  }

  // tableName과 table을 받아 db에 저장
  public static void storeTableInDB(String keyString, Table table)
  {
    try
    {
      // Create the DatabaseEntry for the key
      DatabaseEntry theKey = new DatabaseEntry(keyString.getBytes("UTF-8"));
      // Create the DatabaseEntry for the data. Use the EntryBinding object
      // that was just created to populate the DatabaseEntry
      DatabaseEntry theData = new DatabaseEntry();
      dataBinding.objectToEntry(table, theData);
      // Put it as normal
      myDatabase.put(null, theKey, theData);
      myDatabase.sync();
    }
    catch (Exception e)
    {
      e.printStackTrace();
    }
  }

  //tableName으로 db에서 table을 가져온다.
  public static Table getTableFromDB(String keyString)
  {
    try
    {
      // Create DatabaseEntry objects for the key and data
      DatabaseEntry theKey = new DatabaseEntry(keyString.getBytes("UTF-8"));
      DatabaseEntry theData = new DatabaseEntry();
      // Do the get as normal
      myDatabase.get(null, theKey, theData, LockMode.DEFAULT);
      // Recreate the MyData object from the retrieved DatabaseEntry using
      // the EntryBinding created above
      return dataBinding.entryToObject(theData);
    }
    catch (NullPointerException e)
    {
      return null;
    }
    catch (Exception e)
    {
      e.printStackTrace();
      return null;
    }
  }

  // drop table Query가 완성됐을 때 호출
  public static void dropTableRequest(String tableName) throws Exception
  {
    Table selectedTable = getTableFromDB(tableName);
    if (selectedTable == null)
    {
      throw new Exception("No such table");
    }
    if (selectedTable.isRefered())
    {
      throw new Exception("Drop table has failed: '" + tableName + "' is referenced by other table");
    }
    // update Table.referedBy
    for (FkDef fkDef : selectedTable.getForeignKeys())
    {
      Table referencedTable = getTableFromDB(fkDef.getForeignTableName());
      referencedTable.removeReferencedBy(tableName);
      dropTable(fkDef.getForeignTableName());
      storeTableInDB(fkDef.getForeignTableName(), referencedTable);
    }
    dropTable(tableName);
    System.out.println("'" + tableName + "' table is dropped");
  }

  public static void descTableRequest(String tableName) throws Exception
  {
    Table selectedTable = getTableFromDB(tableName);
    if (selectedTable == null)
    {
      throw new Exception("No such table");
    }
    selectedTable.desc();
  }

  public static void showTablesRequest() throws Exception
  {
    DatabaseEntry foundKey;
    DatabaseEntry foundValue;
    Cursor cursor = myDatabase.openCursor(null, null);
    try
    {
      foundKey = new DatabaseEntry();
      foundValue = new DatabaseEntry();
      // cursor 첫 data를 가리킨다.
      if (cursor.getFirst(foundKey, foundValue, LockMode.DEFAULT) == OperationStatus.NOTFOUND)
      {
        throw new Exception("There is no table");
      }
      System.out.println("----------------");
      // db의 key들을 추출, 출력
      do
      {
        String keyString = new String(foundKey.getData(), "UTF-8");
        System.out.println(keyString);
      }
      while (cursor.getNext(foundKey, foundValue, LockMode.DEFAULT) == OperationStatus.SUCCESS);
      System.out.println("----------------");
    }
    catch (DatabaseException de)
    {
    }
    catch (UnsupportedEncodingException e)
    {
      e.printStackTrace();
    }
    finally
    {
      cursor.close();
    }
  }

  public static void insertRecordRequest(String tableName, InsertColumnValuePairs insertColumnValuePairs) throws Exception
  {
    Table table = getTableFromDB(tableName);
    if (table == null)
    {
      throw new Exception("No such table");
    }
    table.insertRecord(insertColumnValuePairs);
    System.out.println("The row is inserted");
  }

  public static void createTableRequest(String tableName, Table newTable) throws Exception
  {
    // newTable을 DB에 넣어도 되는지 검증
    Table duplicatedTable = getTableFromDB(tableName);
    if (duplicatedTable != null)
    {
      throw new Exception("Create table has failed: table with the same name already exists");
    }
    // 검증 + 정의된 constraints 적용
    newTable.setConstraints();
    // update Table.referedBy
    for (FkDef fkDef : newTable.getForeignKeys())
    {
      Table referencedTable = getTableFromDB(fkDef.getForeignTableName());
      referencedTable.addReferencedBy(tableName);
      dropTable(fkDef.getForeignTableName());
      storeTableInDB(fkDef.getForeignTableName(), referencedTable);
    }
    storeTableInDB(tableName, newTable);
    System.out.println("'" + tableName + "' table is created");
  }

  public static void deleteRequest(String tableName, BooleanExpressionList whereClause) throws Exception
  {
    Table deleteTable = getTableFromDB(tableName);
    deleteTable.deleteRecordsRequest(whereClause);
  }

// columnName과 tableName을 통해 해당 column이 몇번째 index에 있는지 찾는다. table이 없을 경우 -2, column이 없을 경우 -1을 반환한다.
  public static int getIndexOfSpecificColumn(ArrayList < TableColumnTuple > columns, String columnName, String tableName) throws Exception
  {
    int index = - 1;
    int tempIndex = 0;
    boolean tableExist = false;
    for (TableColumnTuple column : columns)
    {
      if (columnName.equals(column.getColumnName()))
      {
        if (tableName == null || tableName.equals(column.getTableName()))
        {
          if (index == - 1)
          {
            index = tempIndex;
          }
          else
          {
            throw new Exception("Where clause contains ambiguous reference");
          }
        }
      }
      if (tableName != null && tableName.equals(column.getTableName()))
      {
        tableExist = true;
      }
      tempIndex++;
    }
    if (!tableExist && index == - 1)
    {
      return - 2;
    }
    return index;
  }

//TableExpression 내의 FromClause,whereCluase를 받아 table의 record를 필터링한다.
  public static RecordTable selectRequest(TableExpression tableExpression) throws Exception
  {
    ArrayList < ReferedTableName > fromClause = tableExpression.getFromClause();
    BooleanExpressionList whereClause = tableExpression.getWhereClause();
    ArrayList < ArrayList < String > > productRecords = new ArrayList();
    ArrayList < ArrayList < String > > resultRecords = new ArrayList();
    ArrayList < TableColumnTuple > resultColumns = new ArrayList();
    ArrayList < Table > tables = new ArrayList();
    ArrayList < ArrayList < String > > cartesianTempRecords = new ArrayList(new ArrayList());
    //from 절의 테이블의 record들을 모두 찾아 Cartesian 곱을 구한다.
    for (ReferedTableName referedTableName : fromClause)
    {
      Table table = getTableFromDB(referedTableName.getTableName());
      if (table == null)
      {
        throw new Exception("Selection has failed: '" + referedTableName.getTableName() + "' does not exist");
      }
      for (Column columnInTable : table.getColumns())
      {
        resultColumns.add(new TableColumnTuple(columnInTable.getColumnName(), referedTableName.getAsName(), columnInTable.getDataType()));
      }
      ArrayList < ArrayList < String > > newRecords = table.getRecords();
      ArrayList < ArrayList < String > > newCartesianTempRecords = new ArrayList();
      for (ArrayList < String > cartesianTempRecord : cartesianTempRecords)
      {
        for (ArrayList < String > newRecord : newRecords)
        {
          ArrayList < String > productOfTwoArray = new ArrayList(cartesianTempRecord);
          productOfTwoArray.addAll(newRecord);
          newCartesianTempRecords.add(productOfTwoArray);
        }
      }
      if (newRecords.isEmpty())
      {
        break;
      }
      if (cartesianTempRecords.isEmpty())
      {
        newCartesianTempRecords.addAll(newRecords);
      }
      cartesianTempRecords = newCartesianTempRecords;
    }
    //cartesian 곱이 끝나고 각 record를 돌면서 where.checkBooleanValue를 호출, filtering
    productRecords = cartesianTempRecords;
    if (whereClause != null)
    {
      for (ArrayList < String > productRecord : productRecords)
      {
        if (whereClause.checkBooleanValue(productRecord, resultColumns).isTrue())
        {
          resultRecords.add(productRecord);
        }
      }
    }
    else
    {
      resultRecords = productRecords;
    }
    return new RecordTable(resultColumns, resultRecords);
  }

// from,where절을 통해 추출된 records를 출력한다.
  public static void printRecords(RecordTable recordTable, ArrayList < TableColumnTuple > selectList) throws Exception
  {
    ArrayList < TableColumnTuple > columns = recordTable.getColumns();
    ArrayList < ArrayList < String > > records = recordTable.getRecords();
    ArrayList < Integer > indexList = new ArrayList();
    StringBuilder columnString = new StringBuilder();
    if (records.isEmpty())
    {
      System.out.println("Empty Set");
    }
    else
    {
      if (selectList.isEmpty())
      {
        selectList = columns;
      }
      for (TableColumnTuple selectedColumn : selectList)
      {
        int index;
        try
        {
          index = getIndexOfSpecificColumn(columns, selectedColumn.getColumnName(), selectedColumn.getTableName());
        }
        catch (Exception e)
        {
          String errorTableName = selectedColumn.getTableName();
          if (errorTableName == null)
          {
            throw new Exception("Selection has failed: fail to resolve '" + selectedColumn.getColumnName() + "'");
          }
          else
          {
            throw new Exception("Selection has failed: fail to resolve '" + errorTableName + "." + selectedColumn.getColumnName() + "'");
          }
        }
        if (index < 0)
        {
          String errorTableName = selectedColumn.getTableName();
          if (errorTableName == null)
          {
            throw new Exception("Selection has failed: fail to resolve '" + selectedColumn.getColumnName() + "'");
          }
          else
          {
            throw new Exception("Selection has failed: fail to resolve '" + errorTableName + "." + selectedColumn.getColumnName() + "'");
          }
        }
        indexList.add(index);
        columnString.append(String.format("|%-20s", selectedColumn.getAsName()));
      }
      int columnSize = selectList.size();
      printLine(columnSize);
      System.out.println(columnString.toString() + "|");
      printLine(columnSize);
      for (ArrayList < String > record : records)
      {
        for (int recordIndex : indexList)
        {
          System.out.printf("|%-20s", record.get(recordIndex));
        }
        System.out.println("|");
      }
      printLine(columnSize);
    }
  }

  public static void printLine(int columnSize)
  {
    for (int i = 0; i < columnSize; i++)
    {
      System.out.print("+--------------------");
    }
    System.out.println("+");
  }

  static final public void command() throws ParseException, Exception {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case CREATE:
    case DROP:
    case DESC:
    case INSERT:
    case DELETE:
    case SELECT:
    case SHOW:
      query();
      break;
    case EXIT:
      jj_consume_token(EXIT);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case SEMICOLON:
        jj_consume_token(SEMICOLON);
        break;
      case END:
        jj_consume_token(END);
        break;
      default:
        jj_la1[0] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      // Close Database
      if (myDatabase != null) myDatabase.close();
      if (myClassDb != null) myClassDb.close();
      if (myDbEnvironment != null) myDbEnvironment.close();
      System.exit(0);
      break;
    default:
      jj_la1[1] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

// 각 쿼리가 ;으로 끝나기 전까지 데이터를 조작하지 않게 하기 위해 각 쿼리가 ;로 끝나도록 변경 .
  static final public void query() throws ParseException, Exception {
    label_1:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case CREATE:
        createTableQuery();
        break;
      case DROP:
        dropTableQuery();
        break;
      case DESC:
        descQuery();
        break;
      case INSERT:
        insertQuery();
        break;
      case DELETE:
        deleteQuery();
        break;
      case SELECT:
        selectQuery();
        break;
      case SHOW:
        showTablesQuery();
        break;
      default:
        jj_la1[2] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case CREATE:
      case DROP:
      case DESC:
      case INSERT:
      case DELETE:
      case SELECT:
      case SHOW:
        ;
        break;
      default:
        jj_la1[3] = jj_gen;
        break label_1;
      }
    }
  }

//below regex for queries are similar to the ones in grammar file.
/// 0. easy ones
  static final public void dropTableQuery() throws ParseException, Exception {
  String tableName;
    jj_consume_token(DROP);
    jj_consume_token(TABLE);
    tableName = tableName();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case END:
      jj_consume_token(END);
        dropTableRequest(tableName);
        System.out.print("DB_2015-11923> ");
      break;
    case SEMICOLON:
      jj_consume_token(SEMICOLON);
        dropTableRequest(tableName);
      break;
    default:
      jj_la1[4] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  static final public void descQuery() throws ParseException, Exception {
  String tableName;
    jj_consume_token(DESC);
    tableName = tableName();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case END:
      jj_consume_token(END);
        descTableRequest(tableName);
        System.out.print("DB_2015-11923> ");
      break;
    case SEMICOLON:
      jj_consume_token(SEMICOLON);
        descTableRequest(tableName);
      break;
    default:
      jj_la1[5] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  static final public void showTablesQuery() throws ParseException, Exception {
    jj_consume_token(SHOW);
    jj_consume_token(TABLES);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case END:
      jj_consume_token(END);
        showTablesRequest();
        System.out.print("DB_2015-11923> ");
      break;
    case SEMICOLON:
      jj_consume_token(SEMICOLON);
        showTablesRequest();
      break;
    default:
      jj_la1[6] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

/// 0. easy ones
/// 1. for createTableQuery()
  static final public void createTableQuery() throws ParseException, Exception {
  String tableName;
    jj_consume_token(CREATE);
    jj_consume_token(TABLE);
    tableName = tableName();
    Table newTable = new Table(tableName);
    tableElementList(newTable);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case END:
      jj_consume_token(END);
        createTableRequest(tableName, newTable);
        System.out.print("DB_2015-11923> ");
      break;
    case SEMICOLON:
      jj_consume_token(SEMICOLON);
        createTableRequest(tableName, newTable);
      break;
    default:
      jj_la1[7] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  static final public void tableElementList(Table newTable) throws ParseException, Exception {
    jj_consume_token(LEFT_PAREN);
    tableElement(newTable);
    label_2:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case COMMA:
        ;
        break;
      default:
        jj_la1[8] = jj_gen;
        break label_2;
      }
      jj_consume_token(COMMA);
      tableElement(newTable);
    }
    jj_consume_token(RIGHT_PAREN);
  }

  static final public void tableElement(Table newTable) throws ParseException, Exception {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case LEGAL_IDENTIFIER:
      columnDefinition(newTable);
      break;
    case PRIMARY:
    case FOREIGN:
      tableConstraintDefinition(newTable);
      break;
    default:
      jj_la1[9] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  static final public void columnDefinition(Table newTable) throws ParseException, Exception {
  String columnName;
  String dataType;
  Token notNull = null;
    columnName = columnName();
    dataType = dataType();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case NOT:
      jj_consume_token(NOT);
      notNull = jj_consume_token(NULL);
      break;
    default:
      jj_la1[10] = jj_gen;
      ;
    }
    if (newTable.checkDuplicatedColumn(columnName))
    {
      {if (true) throw new Exception("Create table has failed: column definition is duplicated");}
    }
    Column newColumn = new Column(columnName, dataType, notNull);
    newTable.addColumn(newColumn);
  }

  static final public void tableConstraintDefinition(Table newTable) throws ParseException, Exception {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case PRIMARY:
      primaryKeyConstraint(newTable);
      break;
    case FOREIGN:
      referentialConstraint(newTable);
      break;
    default:
      jj_la1[11] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  static final public void primaryKeyConstraint(Table newTable) throws ParseException, Exception {
  ArrayList < String > columns;
    jj_consume_token(PRIMARY);
    jj_consume_token(KEY);
    columns = columnNameList();
    if (newTable.getPrimaryKeys().size() > 0)
    {
      {if (true) throw new Exception("Create table has failed: primary key definition is duplicated");}
    }
    newTable.setPkDef(columns);
  }

  static final public void referentialConstraint(Table newTable) throws ParseException {
  ArrayList < String > columns;
  ArrayList < String > foreignColumns;
  String tableName;
    jj_consume_token(FOREIGN);
    jj_consume_token(KEY);
    columns = columnNameList();
    jj_consume_token(REFERENCES);
    tableName = tableName();
    foreignColumns = columnNameList();
    newTable.setFkDef(tableName, columns, foreignColumns);
  }

  static final public ArrayList < String > columnNameList() throws ParseException {
  ArrayList < String > result = new ArrayList();
  String columnName;
    jj_consume_token(LEFT_PAREN);
    columnName = columnName();
    result.add(columnName);
    label_3:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case COMMA:
        ;
        break;
      default:
        jj_la1[12] = jj_gen;
        break label_3;
      }
      jj_consume_token(COMMA);
      columnName = columnName();
      result.add(columnName);
    }
    jj_consume_token(RIGHT_PAREN);
    {if (true) return result;}
    throw new Error("Missing return statement in function");
  }

  static final public String dataType() throws ParseException, Exception {
  Token type;
  Token size = null;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case INT:
      type = jj_consume_token(INT);
      break;
    case CHAR:
      type = jj_consume_token(CHAR);
      jj_consume_token(LEFT_PAREN);
      size = jj_consume_token(INT_VALUE);
      jj_consume_token(RIGHT_PAREN);
      break;
    case DATE:
      type = jj_consume_token(DATE);
      break;
    default:
      jj_la1[13] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    if (size != null && Integer.parseInt(size.image) < 1)
    {
      {if (true) throw new Exception("Char length should be over 0");}
    }
    {if (true) return (size == null) ? type.image : type.image + "(" + size.image + ")";}
    throw new Error("Missing return statement in function");
  }

  static final public String tableName() throws ParseException {
  Token result;
    result = jj_consume_token(LEGAL_IDENTIFIER);
    {if (true) return result.image;}
    throw new Error("Missing return statement in function");
  }

  static final public String columnName() throws ParseException {
  Token token;
    token = jj_consume_token(LEGAL_IDENTIFIER);
    {if (true) return token.image;}
    throw new Error("Missing return statement in function");
  }

/// 1. for createTableQuery
/// 2. for selectQuery
  static final public void selectQuery() throws ParseException, Exception {
  ArrayList < TableColumnTuple > selectList;
  TableExpression tableExpression;
  RecordTable recordTable;
    jj_consume_token(SELECT);
    selectList = selectList();
    tableExpression = tableExpression();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case END:
      jj_consume_token(END);
        recordTable = selectRequest(tableExpression);
        printRecords(recordTable, selectList);
        System.out.print("DB_2015-11923> ");
      break;
    case SEMICOLON:
      jj_consume_token(SEMICOLON);
        recordTable = selectRequest(tableExpression);
        printRecords(recordTable, selectList);
      break;
    default:
      jj_la1[14] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  static final public ArrayList < TableColumnTuple > selectList() throws ParseException {
  TableColumnTuple temp;
  ArrayList < TableColumnTuple > selectList = new ArrayList();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case ASTERISK:
      jj_consume_token(ASTERISK);
      break;
    case LEGAL_IDENTIFIER:
      temp = selectedColumn();
        selectList.add(temp);
      label_4:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case COMMA:
          ;
          break;
        default:
          jj_la1[15] = jj_gen;
          break label_4;
        }
        jj_consume_token(COMMA);
        temp = selectedColumn();
          selectList.add(temp);
      }
      break;
    default:
      jj_la1[16] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    {if (true) return selectList;}
    throw new Error("Missing return statement in function");
  }

  static final public TableColumnTuple selectedColumn() throws ParseException {
  String tableName = null;
  String columnName;
  String asName = null;
    if (jj_2_1(2)) {
      tableName = tableName();
      jj_consume_token(PERIOD);
    } else {
      ;
    }
    columnName = columnName();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case AS:
      jj_consume_token(AS);
      asName = columnName();
      break;
    default:
      jj_la1[17] = jj_gen;
      ;
    }
    if (asName == null)
    {
      {if (true) return new TableColumnTuple(columnName, tableName, null);}
    }
    else
    {
      {if (true) return new TableColumnTuple(columnName, tableName, asName, null);}
    }
    throw new Error("Missing return statement in function");
  }

  static final public TableExpression tableExpression() throws ParseException, Exception {
  ArrayList < ReferedTableName > fromClause;
  BooleanExpressionList whereClause = null;
    fromClause = fromClause();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case WHERE:
      whereClause = whereClause();
      break;
    default:
      jj_la1[18] = jj_gen;
      ;
    }
    {if (true) return new TableExpression(fromClause, whereClause);}
    throw new Error("Missing return statement in function");
  }

  static final public ArrayList < ReferedTableName > fromClause() throws ParseException {
  ArrayList < ReferedTableName > result;
    jj_consume_token(FROM);
    result = tableReferenceList();
    {if (true) return result;}
    throw new Error("Missing return statement in function");
  }

  static final public ArrayList < ReferedTableName > tableReferenceList() throws ParseException {
  ReferedTableName temp;
  ArrayList < ReferedTableName > result = new ArrayList();
    temp = referedTable();
    result.add(temp);
    label_5:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case COMMA:
        ;
        break;
      default:
        jj_la1[19] = jj_gen;
        break label_5;
      }
      jj_consume_token(COMMA);
      temp = referedTable();
      result.add(temp);
    }
    {if (true) return result;}
    throw new Error("Missing return statement in function");
  }

  static final public ReferedTableName referedTable() throws ParseException {
  String tableName = null;
  String asName = null;
    tableName = tableName();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case AS:
      jj_consume_token(AS);
      asName = tableName();
      break;
    default:
      jj_la1[20] = jj_gen;
      ;
    }
    if (asName == null)
    {
      asName = tableName;
    }
    {if (true) return new ReferedTableName(tableName, asName);}
    throw new Error("Missing return statement in function");
  }

  static final public BooleanExpressionList whereClause() throws ParseException {
  BooleanExpressionList result;
    jj_consume_token(WHERE);
    result = booleanValueExpression();
    {if (true) return result;}
    throw new Error("Missing return statement in function");
  }

  static final public BooleanExpressionList booleanValueExpression() throws ParseException {
  ArrayList < ArrayList < BooleanFactor > > booleanTerms = new ArrayList();
  ArrayList < BooleanFactor > booleanTerm;
    booleanTerm = booleanTerm();
    booleanTerms.add(booleanTerm);
    label_6:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case OR:
        ;
        break;
      default:
        jj_la1[21] = jj_gen;
        break label_6;
      }
      jj_consume_token(OR);
      booleanTerm = booleanTerm();
      booleanTerms.add(booleanTerm);
    }
    {if (true) return new BooleanExpressionList(booleanTerms);}
    throw new Error("Missing return statement in function");
  }

  static final public ArrayList < BooleanFactor > booleanTerm() throws ParseException {
  ArrayList < BooleanFactor > booleanFactors = new ArrayList();
  BooleanFactor booleanFactor;
    booleanFactor = booleanFactor();
    booleanFactors.add(booleanFactor);
    label_7:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case AND:
        ;
        break;
      default:
        jj_la1[22] = jj_gen;
        break label_7;
      }
      jj_consume_token(AND);
      booleanFactor = booleanFactor();
      booleanFactors.add(booleanFactor);
    }
    {if (true) return booleanFactors;}
    throw new Error("Missing return statement in function");
  }

  static final public BooleanFactor booleanFactor() throws ParseException {
  Token not = null;
  BooleanExpression booleanTest;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case NOT:
      not = jj_consume_token(NOT);
      break;
    default:
      jj_la1[23] = jj_gen;
      ;
    }
    booleanTest = booleanTest();
    boolean isNot = (not != null);
    {if (true) return new BooleanFactor(isNot, booleanTest);}
    throw new Error("Missing return statement in function");
  }

  static final public BooleanExpression booleanTest() throws ParseException {
  BooleanExpression booleanTest;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case INT_VALUE:
    case LEGAL_IDENTIFIER:
    case DATE_VALUE:
    case CHAR_STRING:
      booleanTest = predicate();
      break;
    case LEFT_PAREN:
      booleanTest = parenthesizedBooleanExpression();
      break;
    default:
      jj_la1[24] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    {if (true) return booleanTest;}
    throw new Error("Missing return statement in function");
  }

  static final public BooleanExpressionList parenthesizedBooleanExpression() throws ParseException {
  BooleanExpressionList booleanValueExpression;
    jj_consume_token(LEFT_PAREN);
    booleanValueExpression = booleanValueExpression();
    jj_consume_token(RIGHT_PAREN);
    {if (true) return booleanValueExpression;}
    throw new Error("Missing return statement in function");
  }

  static final public Predicate predicate() throws ParseException {
  Predicate predicate;
    if (jj_2_2(4)) {
      predicate = comparisonPredicate();
    } else {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case LEGAL_IDENTIFIER:
        predicate = nullPredicate();
        break;
      default:
        jj_la1[25] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
    {if (true) return predicate;}
    throw new Error("Missing return statement in function");
  }

  static final public ComparisonPredicate comparisonPredicate() throws ParseException {
  Operand operand1;
  Token operator;
  Operand operand2;
    operand1 = compOperand();
    operator = jj_consume_token(COMP_OP);
    operand2 = compOperand();
    {if (true) return new ComparisonPredicate(operand1, operand2, operator.image);}
    throw new Error("Missing return statement in function");
  }

  static final public Operand compOperand() throws ParseException {
  Token value = null;
  String tableName = null;
  String columnName = null;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case INT_VALUE:
    case DATE_VALUE:
    case CHAR_STRING:
      value = comparableValue();
      break;
    case LEGAL_IDENTIFIER:
      if (jj_2_3(2)) {
        tableName = tableName();
        jj_consume_token(PERIOD);
      } else {
        ;
      }
      columnName = columnName();
      break;
    default:
      jj_la1[26] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    if (value == null)
    {
      Operand operand = new Operand();
      operand.setColumn(columnName, tableName);
      {if (true) return operand;}
    }
    else
    {
      int insertDatatype = value.kind;
      String dataType = "";
      String saveValue = "";
      switch (insertDatatype)
      {
        // index test !!! lower case
        case SimpleDBMSParser.CHAR_STRING :
        dataType = "char";
        saveValue = value.image.substring(1, value.image.length() - 1);
        break;
        case SimpleDBMSParser.INT_VALUE :
        dataType = "int";
        saveValue = value.image;
        break;
        case SimpleDBMSParser.DATE_VALUE :
        dataType = "date";
        saveValue = value.image;
        break;
        default :
        break;
      }
      {if (true) return new Operand(saveValue, dataType);}
    }
    throw new Error("Missing return statement in function");
  }

  static final public Token comparableValue() throws ParseException {
  Token token;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case INT_VALUE:
      token = jj_consume_token(INT_VALUE);
      break;
    case CHAR_STRING:
      token = jj_consume_token(CHAR_STRING);
      break;
    case DATE_VALUE:
      token = jj_consume_token(DATE_VALUE);
      break;
    default:
      jj_la1[27] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    {if (true) return token;}
    throw new Error("Missing return statement in function");
  }

  static final public NullPredicate nullPredicate() throws ParseException {
  String tableName = null;
  String columnName = null;
  boolean nullCheck;
    if (jj_2_4(2)) {
      tableName = tableName();
      jj_consume_token(PERIOD);
    } else {
      ;
    }
    columnName = columnName();
    nullCheck = nullOperation();
    Operand operand = new Operand();
    operand.setColumn(columnName, tableName);
    {if (true) return new NullPredicate(operand, nullCheck);}
    throw new Error("Missing return statement in function");
  }

  static final public boolean nullOperation() throws ParseException {
  Token not = null;
    jj_consume_token(IS);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case NOT:
      not = jj_consume_token(NOT);
      break;
    default:
      jj_la1[28] = jj_gen;
      ;
    }
    jj_consume_token(NULL);
    {if (true) return (not == null) ? true : false;}
    throw new Error("Missing return statement in function");
  }

/// 2. for selectQuery
/// 3. for insert,delete
  static final public void insertQuery() throws ParseException, Exception {
  Table originalTable;
  String tableName;
  InsertColumnValuePairs insertColumnValuePairs;
    jj_consume_token(INSERT);
    jj_consume_token(INTO);
    tableName = tableName();
    insertColumnValuePairs = insertColumnsAndSource();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case END:
      jj_consume_token(END);
        insertRecordRequest(tableName, insertColumnValuePairs);
        System.out.print("DB_2015-11923> ");
      break;
    case SEMICOLON:
      jj_consume_token(SEMICOLON);
        insertRecordRequest(tableName, insertColumnValuePairs);
      break;
    default:
      jj_la1[29] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  static final public void deleteQuery() throws ParseException, Exception {
  BooleanExpressionList whereClause = null;
  String tableName;
    jj_consume_token(DELETE);
    jj_consume_token(FROM);
    tableName = tableName();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case WHERE:
      whereClause = whereClause();
      break;
    default:
      jj_la1[30] = jj_gen;
      ;
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case END:
      jj_consume_token(END);
        deleteRequest(tableName, whereClause);
        System.out.print("DB_2015-11923> ");
      break;
    case SEMICOLON:
      jj_consume_token(SEMICOLON);
        deleteRequest(tableName, whereClause);
      break;
    default:
      jj_la1[31] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  static final public InsertColumnValuePairs insertColumnsAndSource() throws ParseException {
  ArrayList < String > columnNameList = new ArrayList();
  ArrayList < Token > valueList;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case LEFT_PAREN:
      columnNameList = columnNameList();
      break;
    default:
      jj_la1[32] = jj_gen;
      ;
    }
    valueList = valueList();
    {if (true) return new InsertColumnValuePairs(columnNameList, valueList);}
    throw new Error("Missing return statement in function");
  }

  static final public ArrayList < Token > valueList() throws ParseException {
  ArrayList < Token > valueList = new ArrayList();
  Token value;
    jj_consume_token(VALUES);
    jj_consume_token(LEFT_PAREN);
    value = value();
    valueList.add(value);
    label_8:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case COMMA:
        ;
        break;
      default:
        jj_la1[33] = jj_gen;
        break label_8;
      }
      jj_consume_token(COMMA);
      value = value();
      valueList.add(value);
    }
    jj_consume_token(RIGHT_PAREN);
    {if (true) return valueList;}
    throw new Error("Missing return statement in function");
  }

  static final public Token value() throws ParseException {
  Token value;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case NULL:
      value = jj_consume_token(NULL);
      break;
    case INT_VALUE:
    case DATE_VALUE:
    case CHAR_STRING:
      value = comparableValue();
      break;
    default:
      jj_la1[34] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    {if (true) return value;}
    throw new Error("Missing return statement in function");
  }

  static private boolean jj_2_1(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_1(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(0, xla); }
  }

  static private boolean jj_2_2(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_2(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(1, xla); }
  }

  static private boolean jj_2_3(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_3(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(2, xla); }
  }

  static private boolean jj_2_4(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_4(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(3, xla); }
  }

  static private boolean jj_3R_10() {
    if (jj_3R_11()) return true;
    if (jj_scan_token(COMP_OP)) return true;
    if (jj_3R_11()) return true;
    return false;
  }

  static private boolean jj_3R_14() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(39)) {
    jj_scanpos = xsp;
    if (jj_scan_token(42)) {
    jj_scanpos = xsp;
    if (jj_scan_token(41)) return true;
    }
    }
    return false;
  }

  static private boolean jj_3R_9() {
    if (jj_scan_token(LEGAL_IDENTIFIER)) return true;
    return false;
  }

  static private boolean jj_3R_13() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_3()) jj_scanpos = xsp;
    if (jj_3R_15()) return true;
    return false;
  }

  static private boolean jj_3_4() {
    if (jj_3R_9()) return true;
    if (jj_scan_token(PERIOD)) return true;
    return false;
  }

  static private boolean jj_3_1() {
    if (jj_3R_9()) return true;
    if (jj_scan_token(PERIOD)) return true;
    return false;
  }

  static private boolean jj_3R_12() {
    if (jj_3R_14()) return true;
    return false;
  }

  static private boolean jj_3R_11() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_12()) {
    jj_scanpos = xsp;
    if (jj_3R_13()) return true;
    }
    return false;
  }

  static private boolean jj_3R_15() {
    if (jj_scan_token(LEGAL_IDENTIFIER)) return true;
    return false;
  }

  static private boolean jj_3_2() {
    if (jj_3R_10()) return true;
    return false;
  }

  static private boolean jj_3_3() {
    if (jj_3R_9()) return true;
    if (jj_scan_token(PERIOD)) return true;
    return false;
  }

  static private boolean jj_initialized_once = false;
  /** Generated Token Manager. */
  static public SimpleDBMSParserTokenManager token_source;
  static SimpleCharStream jj_input_stream;
  /** Current token. */
  static public Token token;
  /** Next token. */
  static public Token jj_nt;
  static private int jj_ntk;
  static private Token jj_scanpos, jj_lastpos;
  static private int jj_la;
  static private int jj_gen;
  static final private int[] jj_la1 = new int[35];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static {
      jj_la1_init_0();
      jj_la1_init_1();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {0x0,0x1dd10,0x1dd00,0x1dd00,0x0,0x0,0x0,0x0,0x0,0x300000,0x2000000,0x300000,0x0,0xe0,0x0,0x0,0x80000000,0x8000000,0x80000,0x0,0x8000000,0x4000000,0x20000000,0x2000000,0x0,0x0,0x0,0x0,0x2000000,0x0,0x80000,0x0,0x0,0x0,0x1000000,};
   }
   private static void jj_la1_init_1() {
      jj_la1_1 = new int[] {0x3,0x0,0x0,0x0,0x3,0x3,0x3,0x3,0x10,0x100,0x0,0x0,0x10,0x0,0x3,0x10,0x100,0x0,0x0,0x10,0x0,0x0,0x0,0x0,0x784,0x100,0x780,0x680,0x0,0x3,0x0,0x3,0x4,0x10,0x680,};
   }
  static final private JJCalls[] jj_2_rtns = new JJCalls[4];
  static private boolean jj_rescan = false;
  static private int jj_gc = 0;

  /** Constructor with InputStream. */
  public SimpleDBMSParser(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public SimpleDBMSParser(java.io.InputStream stream, String encoding) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser.  ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new SimpleDBMSParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 35; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 35; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor. */
  public SimpleDBMSParser(java.io.Reader stream) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser. ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new SimpleDBMSParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 35; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  static public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 35; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor with generated Token Manager. */
  public SimpleDBMSParser(SimpleDBMSParserTokenManager tm) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser. ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 35; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(SimpleDBMSParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 35; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  static private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      if (++jj_gc > 100) {
        jj_gc = 0;
        for (int i = 0; i < jj_2_rtns.length; i++) {
          JJCalls c = jj_2_rtns[i];
          while (c != null) {
            if (c.gen < jj_gen) c.first = null;
            c = c.next;
          }
        }
      }
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }

  static private final class LookaheadSuccess extends java.lang.Error { }
  static final private LookaheadSuccess jj_ls = new LookaheadSuccess();
  static private boolean jj_scan_token(int kind) {
    if (jj_scanpos == jj_lastpos) {
      jj_la--;
      if (jj_scanpos.next == null) {
        jj_lastpos = jj_scanpos = jj_scanpos.next = token_source.getNextToken();
      } else {
        jj_lastpos = jj_scanpos = jj_scanpos.next;
      }
    } else {
      jj_scanpos = jj_scanpos.next;
    }
    if (jj_rescan) {
      int i = 0; Token tok = token;
      while (tok != null && tok != jj_scanpos) { i++; tok = tok.next; }
      if (tok != null) jj_add_error_token(kind, i);
    }
    if (jj_scanpos.kind != kind) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) throw jj_ls;
    return false;
  }


/** Get the next Token. */
  static final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

/** Get the specific Token. */
  static final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  static private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  static private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  static private int[] jj_expentry;
  static private int jj_kind = -1;
  static private int[] jj_lasttokens = new int[100];
  static private int jj_endpos;

  static private void jj_add_error_token(int kind, int pos) {
    if (pos >= 100) return;
    if (pos == jj_endpos + 1) {
      jj_lasttokens[jj_endpos++] = kind;
    } else if (jj_endpos != 0) {
      jj_expentry = new int[jj_endpos];
      for (int i = 0; i < jj_endpos; i++) {
        jj_expentry[i] = jj_lasttokens[i];
      }
      jj_entries_loop: for (java.util.Iterator<?> it = jj_expentries.iterator(); it.hasNext();) {
        int[] oldentry = (int[])(it.next());
        if (oldentry.length == jj_expentry.length) {
          for (int i = 0; i < jj_expentry.length; i++) {
            if (oldentry[i] != jj_expentry[i]) {
              continue jj_entries_loop;
            }
          }
          jj_expentries.add(jj_expentry);
          break jj_entries_loop;
        }
      }
      if (pos != 0) jj_lasttokens[(jj_endpos = pos) - 1] = kind;
    }
  }

  /** Generate ParseException. */
  static public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[53];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 35; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
          if ((jj_la1_1[i] & (1<<j)) != 0) {
            la1tokens[32+j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 53; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    jj_endpos = 0;
    jj_rescan_token();
    jj_add_error_token(0, 0);
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  /** Enable tracing. */
  static final public void enable_tracing() {
  }

  /** Disable tracing. */
  static final public void disable_tracing() {
  }

  static private void jj_rescan_token() {
    jj_rescan = true;
    for (int i = 0; i < 4; i++) {
    try {
      JJCalls p = jj_2_rtns[i];
      do {
        if (p.gen > jj_gen) {
          jj_la = p.arg; jj_lastpos = jj_scanpos = p.first;
          switch (i) {
            case 0: jj_3_1(); break;
            case 1: jj_3_2(); break;
            case 2: jj_3_3(); break;
            case 3: jj_3_4(); break;
          }
        }
        p = p.next;
      } while (p != null);
      } catch(LookaheadSuccess ls) { }
    }
    jj_rescan = false;
  }

  static private void jj_save(int index, int xla) {
    JJCalls p = jj_2_rtns[index];
    while (p.gen > jj_gen) {
      if (p.next == null) { p = p.next = new JJCalls(); break; }
      p = p.next;
    }
    p.gen = jj_gen + xla - jj_la; p.first = token; p.arg = xla;
  }

  static final class JJCalls {
    int gen;
    Token first;
    int arg;
    JJCalls next;
  }

}
